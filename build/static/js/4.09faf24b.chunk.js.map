{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuotes.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","isEntering","setIsEntering","authorInputRef","useRef","textInputRef","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","when","message","location","NewQuote","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,mB,qBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,2B,mGCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,UAC7C,E,yBCqDcC,EAjDG,SAACL,GACjB,MAAmCM,oBAAS,GAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAiBrB,OACE,eAAC,WAAD,WAEA,cAAC,EAAD,UACE,uBAAME,QARV,WACEJ,GAAc,EACf,EAMsCP,UAAWC,IAAQW,KAAMC,SAnBhE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBR,EAAeS,QAAQC,MACvCC,EAAcT,EAAaO,QAAQC,MAKzCnB,EAAMqB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,GACjD,EASG,UACGpB,EAAMwB,WACL,qBAAKvB,UAAWC,IAAQuB,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAKzB,UAAWC,IAAQyB,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKtB,OAEtC,sBAAKR,UAAWC,IAAQyB,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKpB,OAEpC,qBAAKV,UAAWC,IAAQ+B,QAAxB,SACE,wBAAQC,QAAS,kBAAI1B,GAAc,EAAlB,EAA0BP,UAAU,MAArD,8BAIJ,cAAC,IAAD,CAAQkC,KAAM5B,EAAY6B,QAAU,SAACC,GAAY,MAAO,iGAAkG,MAG/J,E,gBClCcC,UAhBE,WACf,MAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,UAEhB,GAAE,CAACJ,EAAQC,IAKZ,OAAO,cAAC,EAAD,CAAWnB,UAAoB,YAATkB,EAAoBrB,WAHzB,SAAC0B,GACrBN,EAAYM,EACf,GAEF,C","file":"static/js/4.09faf24b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport { Fragment } from 'react/cjs/react.production.min';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const [isEntering, setIsEntering]= useState(false)\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n  function formFocusedHandler() {\n    setIsEntering(true)\n  }\n\n  return (\n    <Fragment>\n\n    <Card>\n      <form onFocus={formFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n        {props.isLoading && (\n          <div className={classes.loading}>\n            <LoadingSpinner />\n          </div>\n        )}\n\n        <div className={classes.control}>\n          <label htmlFor='author'>Author</label>\n          <input type='text' id='author' ref={authorInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor='text'>Text</label>\n          <textarea id='text' rows='5' ref={textInputRef}></textarea>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={()=>setIsEntering(false)} className='btn'>Add Quote</button>\n        </div>\n      </form>\n      </Card>\n      <Prompt when={isEntering} message={ (location)=>{return \"All entered data will cannot to restored if you leave this page.Are you sure you want to leave?\"}}/>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from \"react\";\nimport QuoteForm from \"../components/quotes/QuoteForm\";\nimport { useHistory } from \"react-router-dom\";\nimport useHttp from \"../hooks/use-http\";\nimport { addQuote } from \"../lib/api\";\nconst NewQuote = () => {\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === \"completed\") {\n      history.push(\"/quotes\");\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n      sendRequest(quoteData);\n  };\n  return <QuoteForm isLoading={status===\"pending\"} onAddQuote={addQuoteHandler} />;\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}